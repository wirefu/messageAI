rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is the document owner
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Conversations - users can only access conversations they're part of
    match /conversations/{conversationId} {
      // Separate rules for list vs get (list doesn't have resource.data)
      allow list: if isAuthenticated();
      allow get: if isAuthenticated() && 
                    request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
                       request.auth.uid in resource.data.participants;
      allow delete: if isAuthenticated() && 
                       request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
                              request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow delete: if isAuthenticated();
      }
      
      // Action items subcollection
      match /actionItems/{actionItemId} {
        allow read, write: if isAuthenticated() && 
                              request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
      
      // Summaries subcollection
      match /summaries/{summaryId} {
        allow read, write: if isAuthenticated() && 
                              request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
  }
}


